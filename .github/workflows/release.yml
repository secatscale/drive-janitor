name: Build and Release

on:
  push:
    tags: ['v*']

jobs:
#--------------------------------------------------------------------
# 1. Compilation des binaires (Linux et Windows via Linux)
#--------------------------------------------------------------------
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        # ‚îÄ‚îÄ Linux / amd64 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        - id: linux-amd64
          os: ubuntu-latest
          goos: linux
          goarch: amd64
          cc: gcc
          pkgconfig: pkg-config
          yara_install: |
            sudo apt-get update
            sudo apt-get install -y pkg-config libyara-dev yara
        # ‚îÄ‚îÄ Windows / amd64 (cross-compile) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        - id: windows-amd64
          os: ubuntu-latest
          goos: windows
          goarch: amd64
          cc: x86_64-w64-mingw32-gcc
          pkgconfig: pkg-config
          yara_install: |
            sudo apt-get update
            sudo apt-get install -y \
              pkg-config gcc-mingw-w64 \
              autoconf automake libtool flex bison git make

    runs-on: ${{ matrix.os }}

    steps:
    #--------------------------------------------------------------#
    # Sources et Go
    #--------------------------------------------------------------#
    - uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version: 1.24.1

    #--------------------------------------------------------------#
    # Installation YARA (Linux & macOS) / Compilation (Windows)
    #--------------------------------------------------------------#
    - name: Install YARA prerequisites
      shell: bash
      run: ${{ matrix.yara_install }}

    - name: Build YARA for Windows (cross-compile)
      if: matrix.goos == 'windows'
      shell: bash
      run: |
        set -euo pipefail
        git clone --recursive --depth 1 https://github.com/VirusTotal/yara.git
        cd yara
        ./bootstrap.sh
        ./configure \
          --host=x86_64-w64-mingw32 \
          --enable-static \
          --disable-shared \
          --without-magic \
          --without-dotnet \
          --without-cuckoo \
          --disable-profiling \
          --prefix=/usr/local/yara-windows
        make -j$(nproc)
        sudo make install
        echo "PKG_CONFIG_PATH=/usr/local/yara-windows/lib/pkgconfig" >> $GITHUB_ENV

    #--------------------------------------------------------------#
    # Compilation
    #--------------------------------------------------------------#
    - name: Build ${{ matrix.id }}
      shell: bash
      env:
        GOOS:        ${{ matrix.goos }}
        GOARCH:      ${{ matrix.goarch }}
        CGO_ENABLED: 1
        CC:          ${{ matrix.cc }}
        PKG_CONFIG:  ${{ matrix.pkgconfig }}
      run: |
        set -euo pipefail
        mkdir -p dist
        EXT=""
        if [ "${GOOS}" = "windows" ]; then EXT=".exe"; fi
        go build -v -trimpath -o "dist/drivejanitor-${GOOS}-${GOARCH}${EXT}" ./main.go

    #--------------------------------------------------------------#
    # Upload vers GitHub Release
    #--------------------------------------------------------------#
    - name: Upload binaries
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#------------------------------------------------------------------
# 2. Cr√©ation du .pkg macOS + binaire nomm√©s en arm64
#------------------------------------------------------------------
build-pkg-macos:
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version: 1.24.1

    - name: Install YARA
      run: brew install yara pkg-config

    - name: Build binary (darwin/arm64)
      env:
        GOOS: darwin
        GOARCH: arm64
      run: |
        set -euo pipefail
        mkdir -p dist
        # Produit: dist/drivejanitor-darwin-arm64
        go build -trimpath -o dist/drivejanitor-darwin-arm64 ./main.go
        chmod +x dist/drivejanitor-darwin-arm64

    - name: Build .pkg (userland via postinstall)
      run: |
        set -euo pipefail
        BINARY="dist/drivejanitor-darwin-arm64"
        PKGROOT="pkgroot"
        mkdir -p "$PKGROOT/private/tmp/drivejanitor-pkg"
        # On copie le binaire en le renommant "drivejanitor" pour le postinstall
        cp "$BINARY" "$PKGROOT/private/tmp/drivejanitor-pkg/drivejanitor"
        cp config.yaml "$PKGROOT/private/tmp/drivejanitor-pkg/"

        mkdir -p scripts
        cat <<'EOF' > scripts/postinstall
        #!/bin/bash
        set -euo pipefail

        # Trouve l'utilisateur r√©el (console session) m√™me si on est root
        REAL_USER=$(stat -f "%Su" /dev/console)
        USER_HOME=$(dscl . -read /Users/$REAL_USER NFSHomeDirectory | awk '{print $2}')

        BIN_DIR="$USER_HOME/.local/bin"
        CONF_DIR="$USER_HOME/.config/drivejanitor"

        mkdir -p "$BIN_DIR" "$CONF_DIR"
        cp /private/tmp/drivejanitor-pkg/drivejanitor "$BIN_DIR/"
        cp /private/tmp/drivejanitor-pkg/config.yaml "$CONF_DIR/"
        chmod +x "$BIN_DIR/drivejanitor"

        echo "‚úÖ drivejanitor installed for $REAL_USER"
        echo "üóÇÔ∏è  Binary: $BIN_DIR/drivejanitor"
        echo "‚öôÔ∏è  Config: $CONF_DIR/config.yaml"
        EOF
        chmod +x scripts/postinstall

        # Produit: dist/drivejanitor-darwin-arm64.pkg
        pkgbuild \
          --root "$PKGROOT" \
          --identifier com.secatscale.drivejanitor \
          --version "${{ github.ref_name }}" \
          --install-location "/" \
          --scripts scripts \
          "dist/drivejanitor-darwin-arm64.pkg"

    - name: Upload darwin artifacts (.pkg + binaire)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/drivejanitor-darwin-arm64.pkg
          dist/drivejanitor-darwin-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

